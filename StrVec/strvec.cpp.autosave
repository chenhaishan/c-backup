#include "strvec.h"
#include <utility>
using namespace std;

StrVec::StrVec(const StrVec &rhs){
    if(size() != 0){
        free();
    }
    auto temp = alloc_n_copy(rhs.begin(), rhs.end());
    elements = temp.first;
    first_free =temp.second;
    cap = first_free;
}

StrVec & StrVec::operator= (const StrVec &rhs){
    auto data = alloc_n_copy(rhs.begin(), rhs.end());
    free();
    elements = data.first;
    cap = first_free = data.second;
    return *this;
}

pair<string *, string *> StrVec::alloc_n_copy(const string *b, const string *e){
    auto data = alloc.allocate(e-b);
    return {data, uninitialized_copy(b, e, data)};
}

void StrVec::free(){
    if(elements){
        for(auto p = first_free; p != elements;){
            alloc.destroy(--p);
        }
        alloc.deallocate(elements, cap-elements);
    }
}

void StrVec::push_back(const string & s){
    chk_n_alloc();
    alloc.construct(first_free++, s);
    
}

void StrVec::reallocate(){
    auto newcapacity = size() ? 2*size() : 1;
    auto newdata = alloc.allocate(newcapacity);
    auto dest = newdata;
    auto elem = elements;
    for(size_t i = 0; i != size(); ++i)
        alloc.construct(dest++, std::move(*elem++));
    free();
    elements = newdata;
    first_free = dest;
    cap = elements + newcapacity;
}
